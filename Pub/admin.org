#+TITLE: DAT121 - Organisation
#+EMAIL: bernardy@chalmers.se
#+STYLE: <link rel="stylesheet" type="text/css" href="pp.css" />

- Programming paradigms
- Chalmers Course code: DAT121
- G.U. Course Code: DIT331
* The teaching team
+ JP Bernardy
  - Course responsible & lecturer
  - Room: EDIT 5469
  - E-mail: bernardy (chalmers.se)
+ Nikita Frolov
  - Exercise tutor

  - Room: EDIT 5461
  - E-mail: frolov (chalmers.se)
+ Dan Rosén
  - Exercise tutor
  - Room: EDIT 5453
  - E-mail: danr (chalmers.se)
    
* Schedule

** Weekly schedule:

+ Lecture 1 - Mon 10.00
+ Lecture 2 - Tue 10.00
+ Exercises
   - group A - Wed 13.15
   - group B - Wed 15.15
+ Exercises
   - open to all: Thu 8.00
+ Office hours:
  - JP: Tue: 10.00
  - Nik: Mon. 13.15
  - Dan: Tue: 13.15

See also timeedit:
https://se.timeedit.net/web/chalmers/db1/public/ri157XQQ708Z50Qv87003gZ6y6Y7008Q5Y61Y5.html
** <<Timetable>>

| Week | Starts | Lecture 1 | Lecture 2      | Exercises |
|------+--------+-----------+----------------+-----------|
|    1 |   0120 | Intr      | IP 1           | EX 1      |
|    2 |   0127 | IP 2      | OO             | EX 2      |
|    3 |   0203 | FP 1      | No lecture (*) | EX 3      |
|    4 |   0210 | FP 2      | FP 3           | EX 4      |
|    5 |   0217 | FP 4      | CP 1           | EX 5      |
|    6 |   0224 | CP 2      | LP 1           | EX 6      |
|    7 |   0303 | LP 2      | Q&A            | EX 7      |

  (*): Charm Days

See table below for detail of contents.

| Abbr | Contents                                                                            |
|------+-------------------------------------------------------------------------------------|
| Intr | Generalities                                                                        |
| IP 1 | Goto ↔ Loops, Pointers and passing by reference, Inlining procedures                |
| EX 1 | Exercises: marked with @1 in file:All.pdf                                           |
| IP 2 | Procedures → Gotos, Explicit stack                                                  |
| OO   | Inheritance, Interfaces, Notion of co/contra variance                               |
| EX 2 | Exercises:  marked with @2 in file:All.pdf                                          |
| FP 1 | Algebraic Types, Pattern matching, Parametric types, Currification & HO Abstraction |
| EX 3 | Exercises marked with @3 in file:All.pdf                                            |
| FP 2 | HOF, HOT paradigm and eliminating HOF: Inlining; Closures                           |
| FP 3 | Explicit state and purity                                                           |
| EX 4 | Exercises marked with @4 in file:All.pdf                                            |
| FP 4 | Laziness & Explicit thunks                                                          |
| CP 1 | Resource-managing processes                                                         |
| EX 5 | Exercises marked with @5 in file:All.pdf                                            |
| CP 2 | Explicit continuations                                                              |
| LP 1 | Intro to LP; Unification                                                            |
| EX 6 | Exercises marked with @6 in file:All.pdf                                            |
| LP 2 | Functions to Relations, Search as list of successes                                 |
| EX 7 | Exercises marked with @7 in file:All.pdf                                            |
| Q&A  | Solutions to (part of) sample exams                                                 |

Note: the contents of each exercise session is about the topics
covered in the two previous lectures. Remember to re-fetch the
file:All.pdf file each week: exercises may have been updated.

* Organisation
** Formal requirements
- Pass the exam
- That's it!
** Informal requirements and learning aids
- Do the exercises
- Participate in the exercises correction sessions: see [[<<Exercises>>][below]] for details.
- Attend the lectures
- Prepare lectures by reading lecture notes and follow relevant links.
** Lectures
- The lecture notes can be accessed here [[http://www.cse.chalmers.se/~bernardy/pp/Lectures.html][here]]
- You can also use the source if you fancy emacs org-mode.
- I prefer to have interaction during the lectures, so feel free to
  interrupt me.
** Exercises
- 2 groups (go to only 1 session).
- Find out which is your group by using [[file:GroupAssignment.hs][this Haskell program]]. See [[file:Schedule.org::timetable][the schedule]] for times.
- Prepare exercises.
  + You should have a written copy of your solution with you if you
    have one.
  + To be able to follow the discussion, you should also bring a
    printout of the questions.
  + See [[file:Schedule.org::timetable][the schedule]] for which exercises you need to prepare for each
    session.
* Reading material
+ Unfortunately, I do not know of a single textbook covering all the
  material in a suitable way. Therefore, [[file:Lectures.org][the lecture notes]] are the "master"
  source for the course.
+ The exercises [[file:All.pdf][(pdf)]] are also part of the course material.
+ Single most relevant textbook: probably

  + "Programming Languages -- Application and Interpretation", Shriram Krishnamurthi.

  http://www.plai.org/
#  http://www.cs.brown.edu/~sk/Publications/Books/ProgLangs/2007-04-26/

  + but
    * uses different structure
    * uses scheme (LISP) syntax
    * is written with MS and PhD students in mind

  + Relevant parts
    * Part I (To understand the point of view of the author)
    * Shreds of part II
    * Parts III, IV, VI, VII
    * Part X (Ch. 24, 25)
    * Part XI

+ Other relevant books
  - "Essentials of Programming Languages", Friedman, Wand and Haynes (http://www.eopl3.com/)
  - "Concepts, Techniques, and Models of Computer Programming", Van Roy (http://www.info.ucl.ac.be/~pvr/book.html)
  - ...

* Outline of the course
** Brief exposition of each paradigm
** (Some) Transformations between paradigms
*This is the focus of the course.*
** Learning outcomes
*** Awareness of multiple paradigms
First questions of the design phase: "How should I think about this
problem? (Do I know a paradigm suitable to express the solution?)"
*** Recognise "encoded" thoughts:
+ what is the natural paradigm
+ decode them

From this point of view, this course teaches "design patterns", /in reverse/.

*** Encode thoughts expressed in a paradigm in another one
*** The exam questions will be similar to exercises
Note in particular that exercises are integral part of the course material.

* Course evaluation

For an overview of the process, see [[http://www.chalmers.se/insidan/SV/utbildning-och-forskning/grundutbildning/undervisningsstod-for/kursutvarderingar][here]].

** Designated representatives:

- RAN XUXIN xuxin student.chalmers.se
- KIOKSOGLOU ANTONIOS antkio student.chalmers.se
- BERG JOAKIM bergjoa student.chalmers.se
- OLSSON JONATHAN jonolss student.chalmers.se
** DONE Evaluation Meeting 1
** DONE Evaluation Meeting 2

Ran and Jonathan present; other two representatives nowhere to be found.

Items:
*** Changes in the course since last year (History).
**** 2012
- Moved from Master (served as a common ground in programming for
  students with various backgrounds -- the course was given to many
  international students)
- To Bachelor (most students had basic course in FP, OO, ...); the
  focus of the course is now to explain the links between the
  paradigms, and explain new concepts by translation into known (old)
  concepts.
**** 2013
- Different style of exercise sessions (less interactive)
- More course material produced
*** Study climate (communication, level of workload, tutorials)
- Good, maybe bad time for lectures in early morning
*** Problematic course items; can resources be used better?
- See below planned changes for next year.
- Should know earlier which exercises are relevant.
*** Course-specific questions in questionnaire; other material for final meeting?
- No extra material



*** TODO Plans for Next year
- FP1: Algebraic Types, Pattern matching, Parametric types, Currification & HOF
- FP2: Polymorphic functions Translating away HOF (Inlining, Closures)
- FP3: Explicit state and laziness
- Write the solution for all questions/exercises in the lecture notes
- Publish the complete code for answers
