======== Consider the program:
test1 xs = foldr 0 (+) xs
test2 xs = foldr 1 (*) xs
Exercise 63
Identify higher-order applications in the above program.


test1 is sum
test2 is product
foldr is a higher order function as it takes another function as an argument


=========
Exercise 64 Assuming that xs are lists of integers, replace the above uses
of higher-order application by explicit closures. (Hint: you need to also change
the definition of foldr/map).

data Closure = Plus | Multiply

foldr :: Closure -> b -> [a] -> b
foldr clos b (x:xs) = (apply clos x) x (foldr clos b xs)
foldr _ b [] = b



apply Plus = (+)
apply Multiply = (*)
apply Charize = (\x -> if x == 0 then ’z’ else chr x)

test1 xs = foldr Plus 0 xs
test2 xs = foldr Multiply 0 xs
test3 xs = map Charize xs

=========
Exercise 65 Add the following line to the above program and repeat the [**,@4]
above 2 exercises.
test3 xs = map (\x -> if x == 0 then ’z’ else chr x) xs

map is a higher order function. in this case it takes an integer

map :: Closure -> [a] -> [b]
map clos (x:xs) = apply ((apply clos) x) : map clos xs
map _    []     = []




==========
Exercise 67
Consider the following (totally unrelated) algorithm:


primes = sieve [2..1000]
sieve (n:ns) = n:sieve (filter (\x -> mod n != 0) ns)




========
Exercise 68
argument.
Write a version of filter which takes an explicit closure as an

apply ..  = ..

filter clos (x:xs) | apply clos x = x : filter clos xs
                   | otherwise    = filter clos xs



========
Exercise 71 In the Java version, write a function that replaces each element
with its index in preorder traversal of the tree.

Node root;

void replacePreorder(Node root) {
	go(0, root);
}

int go(int num, Node node) {
	if (node == null)
		then return num;

	num.val = num;
	num++;
	num = go(num, node.left);
	num = go(num, node.right);

	return num;
}

==================
Exercise 72
Translate the function above to Haskell thinking of it as an
imperative algorithm. You should use IP from the lecture notes. What is the
“state of the world” in this case?
The "state of the world" is an integer increasing one for each node visited




