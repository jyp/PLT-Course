
exp1 = map f
  = go where
      go [] = []
      go (x:xs)
        | x > 0     = x : go xs
        | otherwise = 0 : go xs

exp2 = filter (>= 0)
  = go where
      go [] = []
      go (x:xs) | x >= 0    = x : go xs
                | otherwise = go xs

-- Recap: definition of foldr
foldr f z []     = z
foldr f z (x:xs) = f x (foldr f z (x:xs))

exp3 = foldr (:) []
  = (go where
      go [] = []
      go (x:xs) = x : go xs)
  (= id :: [a] -> [a])

exp4 = foldr (++) []
  = (go where
      go [] = []
      go (x:xs) = x ++ go xs)
  (= concat :: [[a]] -> [a])

exp5 = foldr (\ x xs -> xs ++ [x]) []
  = (go where
      go [] = []
      go (x:xs) = (\ x xs -> xs ++ [x]) x (go xs))
  = (go' where
      go' [] = []
      go' (x:xs) = go' xs ++ [x])
  (= reverse :: [a] -> [a])

